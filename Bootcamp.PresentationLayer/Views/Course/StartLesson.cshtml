@model Bootcamp.EntityLayer.Concrete.Course
@using Microsoft.AspNetCore.Identity
@using Bootcamp.EntityLayer.Concrete
@using Bootcamp.EntityLayer.Extensions
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "StartLesson";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ders Başlat | Yapay Zeka Eğitim</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="css/style.css">
  <link rel="stylesheet" href="/frontend/css/start-lesson.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
   <style>
     .video-completion-checkbox {
       cursor: pointer;
       transform: scale(1.2);
       margin: 0;
     }
     
     .form-check-label {
       cursor: pointer;
       margin: 0;
       padding: 0;
     }
     
     .form-check {
       margin: 0;
       padding: 0;
       display: flex;
       align-items: center;
     }
     
     .video-item:hover .video-completion-checkbox {
       transform: scale(1.3);
       transition: transform 0.2s ease;
     }
   </style>
</head>
<body>
  <main class="container py-5">
    <!-- Progress Section -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h4 class="mb-0" style="color:#6F42C1; font-weight:600;">
            <i class="bi bi-play-circle-fill me-2"></i>@Model.Name - Ders 1
          </h4>
          <span class="badge bg-primary px-3 py-2" style="background:linear-gradient(135deg, #6F42C1 0%, #8B5CF6 100%); border:none;">
            %25 Tamamlandı
          </span>
        </div>
        <div class="progress-modern">
          <div class="progress-bar-modern" style="width: 25%"></div>
                        </div>
                    </div>
                </div>

    <div class="row g-4">
      <!-- Video ve Notlar -->
      <div class="col-lg-8">
        <div style="margin-bottom: 2rem;">
          @if (ViewBag.CurrentVideo != null)
          {
            var currentVideo = ViewBag.CurrentVideo as Bootcamp.EntityLayer.Concrete.CourseVideo;
            <div style="background: #fff; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 20px rgba(0,0,0,0.1);">
              <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
                <iframe id="courseVideo" 
                        src="@currentVideo.VideoUrl" 
                        title="YouTube video player" 
                        frameborder="0" 
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
                        referrerpolicy="strict-origin-when-cross-origin" 
                        allowfullscreen
                        style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none;">
                </iframe>
                        </div>
                             <div style="padding: 1rem;">
                 <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 0.5rem;">
                   <h5 style="margin: 0; color: #333; font-weight: 600;">@currentVideo.Name</h5>
                   <button onclick="markVideoAsCompleted(@currentVideo.Id)" class="btn btn-success btn-sm" style="background: linear-gradient(135deg, #28a745, #20c997); border: none; border-radius: 6px;">
                     <i class="bi bi-check-circle me-1"></i>Tamamlandı
                   </button>
                        </div>
                 <p style="margin: 0; color: #666; font-size: 0.9rem;">@currentVideo.Description</p>
                        </div>
                    </div>
          }
          else
          {
            <div class="alert alert-info">
              <i class="bi bi-info-circle me-2"></i>
              Bu eğitim için henüz video eklenmemiş.
            </div>
          }
                </div>

        <div style="background: #fff; border-radius: 12px; padding: 1.5rem; margin-bottom: 2rem; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 1rem;">
            <h5 style="color:#6F42C1; font-weight:600; margin: 0;">
              <i class="bi bi-robot me-2"></i>Video Özeti
            </h5>
            <button class="btn btn-sm" style="background: linear-gradient(135deg, #6F42C1 0%, #8B5CF6 100%); color: white; border: none; border-radius: 8px; padding: 0.5rem 1rem; font-size: 0.8rem;">
              <i class="bi bi-play-circle me-1"></i>Özetle
                            </button>
                                </div>
          <div id="videoSummary" style="min-height: 200px; border: 2px dashed #e0e0e0; border-radius: 8px; padding: 1rem; background: #fafafa;">
            <div style="color: #999; text-align: center; padding: 2rem 0;">
              <i class="bi bi-robot" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
              <p style="margin: 0;">Video özeti burada görünecek...</p>
              <small>Gemini AI ile otomatik özetleme</small>
                                </div>
                            </div>
                        </div>

                 <div class="d-flex gap-3">
           <button class="btn btn-modern flex-fill" id="prevVideoBtn" onclick="navigateVideo('prev')" disabled>
             <i class="bi bi-arrow-left me-2"></i>Önceki Ders
           </button>
           <button class="btn btn-modern btn-next flex-fill" id="nextVideoBtn" onclick="navigateVideo('next')">
             Sonraki Ders<i class="bi bi-arrow-right ms-2"></i>
           </button>
                                    </div>
                                </div>

      <!-- Video Listesi ve AI Asistan -->
      <div class="col-lg-4">
        <!-- Video Listesi -->
        @if (ViewBag.VideoList != null)
        {
          <div class="ai-chat-modern p-4 mb-4">
            <h6 class="mb-3" style="color:#6F42C1; font-weight:600;">
              <i class="bi bi-play-circle me-2"></i>Video Listesi
            </h6>
            <div class="video-list">
                             @foreach (var video in ViewBag.VideoList as List<Bootcamp.EntityLayer.Concrete.CourseVideo>)
               {
                                       // Video tamamlanma durumunu kontrol et
                    var completedVideoIds = ViewBag.CompletedVideoIds as List<int>;
                    var isCompleted = false;
                    if (completedVideoIds != null && completedVideoIds.Any())
                    {
                        isCompleted = completedVideoIds.Contains(video.Id);
                    }
                    
                    // Eğer ViewBag.CompletedVideoIds null ise, boş liste kullan
                    if (completedVideoIds == null)
                    {
                        completedVideoIds = new List<int>();
                    }
                   
                   <div class="video-item d-flex align-items-center p-2 mb-2" 
                       style="border-radius:0.8rem; background:rgba(111,66,193,0.05); cursor:pointer; @(isCompleted ? "border-left: 4px solid #28a745;" : "")"
                       data-video-url="@video.VideoUrl"
                       data-video-name="@video.Name"
                       data-video-description="@video.Description"
                       data-video-id="@video.Id">
                                       <div class="me-3">
                      <div class="form-check">
                        <input class="form-check-input video-completion-checkbox" type="checkbox" 
                               value="@video.Id" 
                               id="video_@video.Id"
                               @(isCompleted ? "checked" : "")
                               onchange="toggleVideoCompletion(@video.Id, this.checked)">
                        <label class="form-check-label" for="video_@video.Id">
                          <i class="bi @(isCompleted ? "bi-check-circle-fill text-success" : "bi-play-circle-fill")" style="color:@(isCompleted ? "#28a745" : "#6F42C1");"></i>
                        </label>
                                    </div>
                                </div>
                                    <div class="flex-grow-1">
                     <div class="fw-semibold small @(isCompleted ? "text-success" : "")">@video.Name</div>
                     <div class="text-muted small">@video.Description</div>
                                    </div>
                   <div class="ms-2">
                     @if (isCompleted)
                     {
                         <span class="badge bg-success">Tamamlandı</span>
                     }
                     else
                     {
                         <span class="badge bg-secondary">@video.Duration.FormatDuration()</span>
                     }
                                    </div>
                                </div>
               }
                                    </div>
                                </div>
        }
        
        <!-- AI Asistan Chat -->
        <div class="ai-chat-modern p-4 mb-4">
          <div class="d-flex align-items-center mb-3">
            <div class="me-3 pulse-animation">
              <i class="bi bi-robot" style="font-size:1.5rem; color:#6F42C1;"></i>
                                    </div>
            <div>
              <h2 class="h6 mb-0" style="color:#6F42C1; font-weight:600;">AI Asistan</h2>
              <small class="text-muted">7/24 Aktif</small>
                            </div>
                        </div>

          <div class="chat-messages mb-3">
            <div class="message ai">
              <strong>AI:</strong> Merhaba! @Model.Name eğitimi hakkında hangi konuda yardımcı olabilirim?
                                        </div>
            <div class="message user">
              <strong>Sen:</strong> Bu konu hakkında örnek verir misin?
                                            </div>
            <div class="message ai">
              <strong>AI:</strong> Tabii! @Model.Description konusunda size yardımcı olabilirim...
                                </div>
                            </div>

          <form class="d-flex gap-2">
            <input type="text" class="form-control" placeholder="Sorunu yaz..." style="border-radius:0.8rem; border:1px solid rgba(111,66,193,0.2);">
            <button class="btn btn-primary" style="background:linear-gradient(135deg, #6F42C1 0%, #8B5CF6 100%); border:none; border-radius:0.8rem; width:50px;">
              <i class="bi bi-send"></i>
                                </button>
                            </form>
        </div>
        
        <!-- Quick Actions -->
        <div class="ai-chat-modern p-4">
          <h6 class="mb-3" style="color:#6F42C1; font-weight:600;">
            <i class="bi bi-lightning-fill me-2"></i>Hızlı Eylemler
          </h6>
          <div class="d-grid gap-2">
            <button class="btn btn-outline-primary btn-sm" style="border-radius:0.8rem; border-color:rgba(111,66,193,0.3);">
              <i class="bi bi-question-circle me-2"></i>Kavram Açıklaması
            </button>
            <button class="btn btn-outline-warning btn-sm" style="border-radius:0.8rem; border-color:rgba(255,193,7,0.3);">
              <i class="bi bi-lightbulb me-2"></i>İpucu İste
            </button>
            <button class="btn btn-outline-success btn-sm" style="border-radius:0.8rem; border-color:rgba(40,167,69,0.3);">
              <i class="bi bi-check-circle me-2"></i>Çözümü Göster
            </button>
                         <button class="btn btn-outline-info btn-sm" style="border-radius:0.8rem; border-color:rgba(13,202,240,0.3);" onclick="summarizeVideo()">
               <i class="bi bi-robot me-2"></i>Dersi Özetle
             </button>
                        </div>
                    </div>
                </div>
            </div>
  </main>


  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/frontend/js/start-lesson.js"></script>
  <script>
                 // Video değiştirme fonksiyonu (YouTube iframe için)
        function changeVideo(videoUrl, videoName, videoDescription, videoId) {
          const iframe = document.getElementById('courseVideo');
          const videoInfo = document.querySelector('.video-info');
          
          // Iframe src'sini güncelle (URL zaten embed formatında)
          iframe.src = videoUrl;
          
          // Video bilgilerini güncelle
          if (videoInfo) {
            videoInfo.innerHTML = `
              <h5 class="mb-2">${videoName}</h5>
              <p class="text-muted mb-0">${videoDescription}</p>
            `;
          }
          
          // İlerleme kaydetme kaldırıldı - sadece video geçişi yapıyor
        }
     
           // İlerleme kaydetme fonksiyonu
      function saveProgress(videoId) {
        const courseId = @Model.Id; // Razor syntax ile course ID'yi al
        
        fetch('/Course/SaveProgress', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: `courseId=${courseId}&videoId=${videoId}`
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            console.log('İlerleme kaydedildi:', data.message);
          } else {
            console.error('İlerleme kaydedilemedi:', data.message);
          }
        })
        .catch(error => {
          console.error('Hata:', error);
        });
      }
      
      // Video tamamlandı işaretleme fonksiyonu
      function markVideoAsCompleted(videoId) {
        const courseId = @Model.Id;
        const button = event.target.closest('button');
        
        // Butonu devre dışı bırak
        button.disabled = true;
        button.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>Kaydediliyor...';
        
        fetch('/Course/SaveProgress', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: `courseId=${courseId}&videoId=${videoId}`
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Başarı mesajı göster
            button.innerHTML = '<i class="bi bi-check-circle-fill me-1"></i>Tamamlandı!';
            button.style.background = 'linear-gradient(135deg, #198754, #146c43)';
            
            // Checkbox'ı işaretle
            const checkbox = document.getElementById(`video_${videoId}`);
            if (checkbox) {
              checkbox.checked = true;
              updateVideoItemStyle(videoId, true);
            }
            
            // 2 saniye sonra bir sonraki videoya geç
            setTimeout(() => {
              navigateVideo('next');
            }, 2000);
          } else {
            // Hata durumunda butonu eski haline getir
            button.disabled = false;
            button.innerHTML = '<i class="bi bi-check-circle me-1"></i>Tamamlandı';
            button.style.background = 'linear-gradient(135deg, #28a745, #20c997)';
            alert('Video tamamlandı olarak işaretlenemedi: ' + data.message);
          }
        })
        .catch(error => {
          console.error('Hata:', error);
          // Hata durumunda butonu eski haline getir
          button.disabled = false;
          button.innerHTML = '<i class="bi bi-check-circle me-1"></i>Tamamlandı';
          button.style.background = 'linear-gradient(135deg, #28a745, #20c997)';
          alert('Bir hata oluştu. Lütfen tekrar deneyin.');
        });
      }
      
             // Checkbox ile video tamamlanma durumunu değiştirme
       function toggleVideoCompletion(videoId, isCompleted) {
         const courseId = @Model.Id;

        
        if (isCompleted) {
          // Video tamamlandı olarak işaretle
          fetch('/Course/SaveProgress', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `courseId=${courseId}&videoId=${videoId}`
          })
          .then(response => response.json())
                     .then(data => {
             if (data.success) {
               console.log('Video tamamlandı olarak işaretlendi:', videoId);
               updateVideoItemStyle(videoId, true);
               
               // ViewBag.CompletedVideoIds listesine ekle (client-side)
               const completedVideoIds = window.completedVideoIds || [];
               if (!completedVideoIds.includes(videoId)) {
                 completedVideoIds.push(videoId);
               }
               window.completedVideoIds = completedVideoIds;
             } else {
               // Hata durumunda checkbox'ı geri al
               const checkbox = document.getElementById(`video_${videoId}`);
               if (checkbox) {
                 checkbox.checked = false;
               }
               alert('Video tamamlandı olarak işaretlenemedi: ' + data.message);
             }
           })
          .catch(error => {
            console.error('Hata:', error);
            // Hata durumunda checkbox'ı geri al
            const checkbox = document.getElementById(`video_${videoId}`);
            if (checkbox) {
              checkbox.checked = false;
            }
            alert('Bir hata oluştu. Lütfen tekrar deneyin.');
          });
        } else {
          // Video tamamlanma durumunu kaldır
          fetch('/Course/RemoveProgress', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `courseId=${courseId}&videoId=${videoId}`
          })
          .then(response => response.json())
                     .then(data => {
             if (data.success) {
               console.log('Video tamamlanma durumu kaldırıldı:', videoId);
               updateVideoItemStyle(videoId, false);
               
               // ViewBag.CompletedVideoIds listesini güncelle (client-side)
               const completedVideoIds = window.completedVideoIds || [];
               const index = completedVideoIds.indexOf(videoId);
               if (index > -1) {
                 completedVideoIds.splice(index, 1);
               }
               window.completedVideoIds = completedVideoIds;
             } else {
               // Hata durumunda checkbox'ı geri al
               const checkbox = document.getElementById(`video_${videoId}`);
               if (checkbox) {
                 checkbox.checked = true;
               }
               alert('Video tamamlanma durumu kaldırılamadı: ' + data.message);
             }
           })
          .catch(error => {
            console.error('Hata:', error);
            // Hata durumunda checkbox'ı geri al
            const checkbox = document.getElementById(`video_${videoId}`);
            if (checkbox) {
              checkbox.checked = true;
            }
            alert('Bir hata oluştu. Lütfen tekrar deneyin.');
          });
        }
      }
      
      // Video item stilini güncelle
      function updateVideoItemStyle(videoId, isCompleted) {
        const videoItem = document.querySelector(`[data-video-id="${videoId}"]`);
        if (videoItem) {
          const icon = videoItem.querySelector('.bi');
          const title = videoItem.querySelector('.fw-semibold');
          const badge = videoItem.querySelector('.badge');
          
          if (isCompleted) {
            // Tamamlandı stili
            videoItem.style.borderLeft = '4px solid #28a745';
            icon.className = 'bi bi-check-circle-fill text-success';
            icon.style.color = '#28a745';
            title.classList.add('text-success');
            if (badge) {
              badge.className = 'badge bg-success';
              badge.textContent = 'Tamamlandı';
            }
          } else {
            // Tamamlanmamış stili
            videoItem.style.borderLeft = '';
            icon.className = 'bi bi-play-circle-fill';
            icon.style.color = '#6F42C1';
            title.classList.remove('text-success');
            if (badge) {
              badge.className = 'badge bg-secondary';
              badge.textContent = 'Video süresi'; // Bu kısım dinamik olarak güncellenecek
            }
          }
        }
      }
    
         // Video listesi item'larına tıklama olayı ekle
     document.addEventListener('DOMContentLoaded', function() {
       const videoItems = document.querySelectorAll('.video-item');
       videoItems.forEach(function(item, index) {
                   item.addEventListener('click', function(e) {
            // Checkbox'a tıklandıysa video değiştirme
            if (e.target.type === 'checkbox' || e.target.classList.contains('form-check-input') || e.target.classList.contains('form-check-label')) {
              return;
            }
            
            // Aktif video item'ını güncelle
            videoItems.forEach(v => v.style.background = 'rgba(111,66,193,0.05)');
            this.style.background = 'rgba(111,66,193,0.2)';
            
                        // Video bilgilerini data attribute'lardan al
             const videoUrl = this.getAttribute('data-video-url');
             const videoName = this.getAttribute('data-video-name');
             const videoDescription = this.getAttribute('data-video-description');
             const videoId = this.getAttribute('data-video-id');
             
             // Current video index'i güncelle
             currentVideoIndex = index;
             
             changeVideo(videoUrl, videoName, videoDescription, videoId);
            
            // Navigasyon butonlarını güncelle
            updateNavigationButtons();
          });
       });
       
       // Sayfa yüklendiğinde navigasyon butonlarını güncelle
       updateNavigationButtons();
     });
     
     // Video özetleme fonksiyonu
     function summarizeVideo() {
       const summaryArea = document.getElementById('videoSummary');
       
       // Loading durumu göster
       summaryArea.innerHTML = `
         <div style="color: #6F42C1; text-align: center; padding: 2rem 0;">
           <i class="bi bi-robot" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
           <p style="margin: 0;">Video özetleniyor...</p>
           <small>Gemini AI çalışıyor</small>
                        </div>
       `;
       
       // Simüle edilmiş API çağrısı (gelecekte Gemini API ile değiştirilecek)
       setTimeout(() => {
         summaryArea.innerHTML = `
           <div style="color: #333;">
             <h6 style="color: #6F42C1; margin-bottom: 1rem;">
               <i class="bi bi-robot me-2"></i>Video Özeti
             </h6>
             <div style="background: #f8f9fa; border-radius: 8px; padding: 1rem; margin-bottom: 1rem;">
               <h6 style="color: #495057; margin-bottom: 0.5rem;">📝 Ana Konular:</h6>
               <ul style="margin: 0; padding-left: 1.5rem; color: #666;">
                 <li>Matematik temelleri ve kavramlar</li>
                 <li>Pratik uygulama örnekleri</li>
                 <li>Problem çözme teknikleri</li>
               </ul>
                        </div>
             <div style="background: #e8f5e8; border-radius: 8px; padding: 1rem;">
               <h6 style="color: #28a745; margin-bottom: 0.5rem;">✅ Önemli Noktalar:</h6>
               <ul style="margin: 0; padding-left: 1.5rem; color: #666;">
                 <li>Temel formüller ve kurallar</li>
                 <li>Dikkat edilmesi gereken hatalar</li>
                 <li>İleri seviye konulara hazırlık</li>
               </ul>
                    </div>
                </div>
         `;
       }, 2000); // 2 saniye sonra sonucu göster
     }
     
           // Video navigasyon fonksiyonu
      let currentVideoIndex = 0;
      let videoList = [];
      
             // Tamamlanan video ID'lerini client-side'da tut
       window.completedVideoIds = @Html.Raw(Json.Serialize(ViewBag.CompletedVideoIds ?? new List<int>()));

     
     function navigateVideo(direction) {
       const videoItems = document.querySelectorAll('.video-item');
       
       if (videoItems.length === 0) return;
       
       if (direction === 'next' && currentVideoIndex < videoItems.length - 1) {
         currentVideoIndex++;
       } else if (direction === 'prev' && currentVideoIndex > 0) {
         currentVideoIndex--;
       }
       
       // Video listesindeki ilgili item'ı tıkla
       if (videoItems[currentVideoIndex]) {
         videoItems[currentVideoIndex].click();
       }
       
       // Buton durumlarını güncelle
       updateNavigationButtons();
     }
     
     function updateNavigationButtons() {
       const videoItems = document.querySelectorAll('.video-item');
       const prevBtn = document.getElementById('prevVideoBtn');
       const nextBtn = document.getElementById('nextVideoBtn');
       
       if (videoItems.length === 0) {
         prevBtn.disabled = true;
         nextBtn.disabled = true;
         return;
       }
       
       // Önceki buton durumu
       prevBtn.disabled = currentVideoIndex === 0;
       
       // Sonraki buton durumu
       nextBtn.disabled = currentVideoIndex === videoItems.length - 1;
     }
     

   </script>
</body>
</html> 