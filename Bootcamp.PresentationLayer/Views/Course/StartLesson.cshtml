@model Bootcamp.EntityLayer.Concrete.Course
@using Microsoft.AspNetCore.Identity
@using Bootcamp.EntityLayer.Concrete
@using Bootcamp.EntityLayer.Extensions
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "StartLesson";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ders Başlat | Yapay Zeka Eğitim</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="css/style.css">
  <link rel="stylesheet" href="/frontend/css/start-lesson.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
   <style>
     .video-completion-checkbox {
       cursor: pointer;
       transform: scale(1.5);
       margin: 0;
       accent-color: #8B5CF6;
       border: 2px solid #8B5CF6;
       border-radius: 4px;
     }
     
     .form-check-label {
       cursor: pointer;
       margin: 0;
       padding: 0;
       display: flex;
       align-items: center;
       justify-content: center;
       width: 24px;
       height: 24px;
       border-radius: 4px;
       background: rgba(139,92,246,0.1);
       transition: all 0.2s ease;
     }
     
     .form-check-label:hover {
       background: rgba(139,92,246,0.2);
       transform: scale(1.1);
     }
     
     .form-check {
       margin: 0;
       padding: 0;
       display: flex;
       align-items: center;
       justify-content: center;
       min-width: 32px;
       height: 32px;
     }
     
     .video-item:hover .video-completion-checkbox {
       transform: scale(1.6);
       transition: transform 0.2s ease;
     }
     
     .video-item:hover .form-check-label {
       background: rgba(139,92,246,0.2);
       transform: scale(1.1);
     }
   </style>
</head>
<body>
  <main class="container py-5">
    <!-- Progress Section -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h4 class="mb-0" style="color:#6F42C1; font-weight:600;">
            <i class="bi bi-play-circle-fill me-2"></i>@Model.Name - Ders 1
          </h4>
          <span class="badge bg-primary px-3 py-2" style="background:linear-gradient(135deg, #6F42C1 0%, #8B5CF6 100%); border:none;">
            %25 Tamamlandı
          </span>
        </div>
        <div class="progress-modern">
          <div class="progress-bar-modern" style="width: 25%"></div>
                        </div>
                    </div>
                </div>

    <div class="row g-4">
      <!-- Video ve Notlar -->
      <div class="col-lg-8">
        <div style="margin-bottom: 2rem;">
          @if (ViewBag.CurrentVideo != null)
          {
            var currentVideo = ViewBag.CurrentVideo as Bootcamp.EntityLayer.Concrete.CourseVideo;
            <div style="background: #fff; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 20px rgba(0,0,0,0.1);">
              <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
                <iframe id="courseVideo" 
                        src="@currentVideo.VideoUrl" 
                        title="YouTube video player" 
                        frameborder="0" 
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
                        referrerpolicy="strict-origin-when-cross-origin" 
                        allowfullscreen
                        style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none;">
                </iframe>
                        </div>
                             <div style="padding: 1rem;">
                 <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                   <h5 style="margin: 0; color: #333; font-weight: 600;">@currentVideo.Name</h5>
                   <button onclick="markVideoAsCompleted(@currentVideo.Id)" class="btn btn-success btn-sm" style="background: linear-gradient(135deg, #28a745, #20c997); border: none; border-radius: 6px;">
                     <i class="bi bi-check-circle me-1"></i>Dersi Tamamla
                   </button>
                        </div>
                 <p style="margin: 0; color: #666; font-size: 0.9rem;">@currentVideo.Description</p>
                        </div>
                    </div>
          }
          else
          {
            <div class="alert alert-info">
              <i class="bi bi-info-circle me-2"></i>
              Bu eğitim için henüz video eklenmemiş.
            </div>
          }
                </div>

        <div style="background: #fff; border-radius: 12px; padding: 1.5rem; margin-bottom: 2rem; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 1rem;">
            <h5 style="color:#6F42C1; font-weight:600; margin: 0;">
              <i class="bi bi-robot me-2"></i>Ders Özeti
            </h5>
        
                                </div>
                     <div id="videoSummary" style="min-height: 375px; max-height: 375px; border: 2px dashed #e0e0e0; border-radius: 8px; padding: 1rem; background: #fafafa; display: flex; align-items: center; justify-content: center; overflow-y: auto;">
             <div style="color: #999; text-align: center;">
               <i class="bi bi-robot" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
               <p style="margin: 0;">Ders özeti burada görünecek...</p>
               <small>Gemini AI ile otomatik özetleme</small>
             </div>
           </div>
           <div id="pdfDownloadSection" style="display: none; margin-top: 1rem; text-align: center;">
             <button class="btn btn-success" id="downloadPdfBtn" onclick="downloadPdf()" style="background: linear-gradient(135deg, #28a745, #20c997); border: none; border-radius: 8px; padding: 10px 20px;">
               <i class="bi bi-file-earmark-pdf me-2"></i>PDF Olarak İndir
             </button>
           </div>
                        </div>

                 <div class="d-flex gap-3">
           <button class="btn btn-modern flex-fill" id="prevVideoBtn" onclick="navigateVideo('prev')" disabled>
             <i class="bi bi-arrow-left me-2"></i>Önceki Ders
           </button>
           <button class="btn btn-modern btn-next flex-fill" id="nextVideoBtn" onclick="navigateVideo('next')">
             Sonraki Ders<i class="bi bi-arrow-right ms-2"></i>
           </button>
                                    </div>
                                </div>

      <!-- Video Listesi ve AI Asistan -->
      <div class="col-lg-4">
        <!-- Video Listesi -->
        @if (ViewBag.VideoList != null)
        {
          <div class="ai-chat-modern p-4 mb-4">
            <h6 class="mb-3" style="color:#6F42C1; font-weight:600;">
              <i class="bi bi-play-circle me-2"></i>Video Listesi
            </h6>
            <div class="video-list" style="max-height: 400px; overflow-y: auto; overflow-x: hidden; padding-right: 8px;">
              <style>
                .video-list::-webkit-scrollbar {
                  width: 6px;
                }
                .video-list::-webkit-scrollbar-track {
                  background: rgba(139,92,246,0.1);
                  border-radius: 3px;
                }
                .video-list::-webkit-scrollbar-thumb {
                  background: #8B5CF6;
                  border-radius: 3px;
                }
                .video-list::-webkit-scrollbar-thumb:hover {
                  background: #7C3AED;
                }
              </style>
                             @foreach (var video in ViewBag.VideoList as List<Bootcamp.EntityLayer.Concrete.CourseVideo>)
               {
                                       // Video tamamlanma durumunu kontrol et
                    var completedVideoIds = ViewBag.CompletedVideoIds as List<int>;
                    var isCompleted = false;
                    if (completedVideoIds != null && completedVideoIds.Any())
                    {
                        isCompleted = completedVideoIds.Contains(video.Id);
                    }
                    
                    // Eğer ViewBag.CompletedVideoIds null ise, boş liste kullan
                    if (completedVideoIds == null)
                    {
                        completedVideoIds = new List<int>();
                    }
                   
                   <div class="video-item d-flex align-items-center p-3 mb-2" 
                       style="border-radius:0.8rem; background:rgba(111,66,193,0.05); cursor:pointer; @(isCompleted ? "border-left: 4px solid #28a745;" : ""); transition: all 0.2s ease;"
                       data-video-url="@video.VideoUrl"
                       data-video-name="@video.Name"
                       data-video-description="@video.Description"
                       data-video-id="@video.Id">
                                       <div class="me-3" style="min-width: 40px;">
                      <div class="form-check">
                        <input class="form-check-input video-completion-checkbox" type="checkbox" 
                               value="@video.Id" 
                               id="video_@video.Id"
                               @(isCompleted ? "checked" : "")
                               onchange="toggleVideoCompletion(@video.Id, this.checked)">
                        <label class="form-check-label" for="video_@video.Id">
                          <i class="bi @(isCompleted ? "bi-check-circle-fill" : "bi-play-circle-fill")" style="color:@(isCompleted ? "#28a745" : "#8B5CF6"); font-size: 14px;"></i>
                        </label>
                                    </div>
                                </div>
                                    <div class="flex-grow-1" style="min-width: 0; max-width: 200px;">
                     <div class="fw-semibold small @(isCompleted ? "text-success" : "")" style="margin-bottom: 2px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@video.Name</div>
                     <div class="text-muted small" style="line-height: 1.3; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">@video.Description</div>
                                    </div>
                   <div class="ms-2" style="min-width: 60px; text-align: right;">
                     @if (isCompleted)
                     {
                         <span class="badge bg-success" style="font-size: 0.7rem;">Dersi Tamamla</span>
                     }
                     else
                     {
                         <span class="badge bg-secondary" style="font-size: 0.7rem;">@video.Duration.FormatDuration()</span>
                     }
                                    </div>
                                </div>
               }
                                    </div>
                                </div>
        }
        
        <!-- AI Asistan Chat -->
        <div class="ai-chat-modern p-4 mb-4" style="background: linear-gradient(135deg, #f8f9fa, #e9ecef); border-radius: 15px; box-shadow: 0 8px 25px rgba(0,0,0,0.15); border: none;">
          <div class="d-flex align-items-center mb-3">
            <div class="me-3 pulse-animation">
              <i class="bi bi-robot" style="font-size:1.5rem; color:#667eea;"></i>
                                    </div>
            <div>
              <h2 class="h6 mb-0" style="color:#667eea; font-weight:600;">AI Asistan</h2>
              <small class="text-muted">7/24 Aktif</small>
                            </div>
                        </div>

          <div class="chat-messages mb-3" id="chatMessages" style="max-height: 300px; overflow-y: auto; background: white; border-radius: 12px; padding: 15px; box-shadow: inset 0 2px 4px rgba(0,0,0,0.1); border: 2px solid #e0e0e0;">
            <div class="message ai" style="background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 10px; border-radius: 15px; margin-bottom: 10px; max-width: 80%;">
              <strong>AI:</strong> Merhaba! @Model.Name eğitimi hakkında hangi konuda yardımcı olabilirim? Dersle ilgili herhangi bir sorunuz varsa sorabilirsiniz! 🤖
                                        </div>
                            </div>

          <form class="d-flex gap-2" id="questionForm">
            <input type="text" id="questionInput" class="form-control" placeholder="Dersle ilgili sorunuzu yazın..." style="border-radius:0.8rem; border:1px solid rgba(102, 126, 234, 0.3);">
            <button type="submit" class="btn btn-primary" id="sendQuestionBtn" style="background:linear-gradient(135deg, #667eea, #764ba2); border:none; border-radius:0.8rem; width:50px;">
              <i class="bi bi-send"></i>
                                </button>
                            </form>
        </div>
        
        <!-- Quick Actions -->
        <div class="ai-chat-modern p-4">
          <h6 class="mb-3" style="color:#6F42C1; font-weight:600;">
            <i class="bi bi-lightning-fill me-2"></i>Hızlı Eylemler
          </h6>
          <div class="d-grid gap-2">
            <button class="btn btn-outline-primary btn-sm" style="border-radius:0.8rem; border-color:rgba(111,66,193,0.3);">
              <i class="bi bi-question-circle me-2"></i>Kavram Açıklaması
            </button>
            <button class="btn btn-outline-warning btn-sm" style="border-radius:0.8rem; border-color:rgba(255,193,7,0.3);">
              <i class="bi bi-lightbulb me-2"></i>İpucu İste
            </button>
            <button class="btn btn-outline-success btn-sm" style="border-radius:0.8rem; border-color:rgba(40,167,69,0.3);">
              <i class="bi bi-check-circle me-2"></i>Çözümü Göster
            </button>
                         <button class="btn btn-outline-info btn-sm" style="border-radius:0.8rem; border-color:rgba(13,202,240,0.3);" onclick="summarizeVideo()">
               <i class="bi bi-robot me-2"></i>Dersi Özetle
             </button>
                        </div>
                    </div>
                    
        <!-- API Kullanım Durumu -->
        <div class="ai-chat-modern p-4" style="margin-top: 1rem;">
          <div class="p-3" style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); border-radius: 8px; border: 1px solid #2196f3;">
            <div class="d-flex justify-content-between align-items-center">
              <div>
                <i class="bi bi-speedometer2 me-2" style="color: #2196f3;"></i>
                <span style="font-weight: 600; color: #1976d2;">API Kullanım Durumu</span>
              </div>
              <div id="apiUsageDisplay" style="text-align: right;">
                <div style="font-size: 1.2rem; font-weight: bold; color: #1976d2;">
                  <span id="usedCount">-</span>/<span id="totalCount">50</span>
                </div>
                <div style="font-size: 0.8rem; color: #666;">
                  <span id="remainingText">Yükleniyor...</span>
                </div>
              </div>
            </div>
            <div class="mt-2">
              <div class="progress" style="height: 6px; background-color: #e0e0e0;">
                <div id="usageProgressBar" class="progress-bar" style="background: linear-gradient(135deg, #4caf50, #8bc34a); width: 0%;"></div>
              </div>
            </div>
          </div>
        </div>
                </div>
            </div>
  </main>


  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/frontend/js/start-lesson.js"></script>
  <script>
                 // Video değiştirme fonksiyonu (YouTube iframe için)
        function changeVideo(videoUrl, videoName, videoDescription, videoId) {
          const iframe = document.getElementById('courseVideo');
          
          // Iframe src'sini güncelle (URL zaten embed formatında)
          iframe.src = videoUrl;
          
          // Video başlığını güncelle
          const videoTitle = document.querySelector('h5');
          if (videoTitle) {
            videoTitle.textContent = videoName;
          }
          
          // Video açıklamasını güncelle
          const videoDesc = document.querySelector('p[style*="color: #666"]');
          if (videoDesc) {
            videoDesc.textContent = videoDescription;
          }
          
          // Tamamlandı butonunu güncelle
          const completeButton = document.querySelector('button[onclick*="markVideoAsCompleted"]');
          if (completeButton) {
            completeButton.setAttribute('onclick', `markVideoAsCompleted(${videoId})`);
            
            // Butonun durumunu kontrol et ve güncelle
            const completedVideoIds = window.completedVideoIds || [];
            const isCompleted = completedVideoIds.includes(parseInt(videoId));
            
            if (isCompleted) {
              completeButton.innerHTML = '<i class="bi bi-check-circle-fill me-1"></i>Tamamlandı!';
              completeButton.style.background = 'linear-gradient(135deg, #198754, #146c43)';
              completeButton.disabled = true;
            } else {
              completeButton.innerHTML = '<i class="bi bi-check-circle me-1"></i>Dersi Tamamla';
              completeButton.style.background = 'linear-gradient(135deg, #28a745, #20c997)';
              completeButton.disabled = false;
            }
          }
          
          // Video özetini temizle
          const summaryArea = document.getElementById('videoSummary');
          const pdfDownloadSection = document.getElementById('pdfDownloadSection');
          if (summaryArea) {
            summaryArea.style.display = 'flex';
            summaryArea.style.alignItems = 'center';
            summaryArea.style.justifyContent = 'center';
            summaryArea.innerHTML = `
              <div style="color: #999; text-align: center;">
                <i class="bi bi-robot" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
                <p style="margin: 0;">Ders özeti burada görünecek...</p>
                <small>Gemini AI ile otomatik özetleme</small>
              </div>
            `;
          }
          
          // PDF indirme bölümünü gizle
          if (pdfDownloadSection) {
            pdfDownloadSection.style.display = 'none';
          }
          
          // Global özet değişkenini temizle
          window.currentSummary = null;
          
          // İlerleme kaydetme kaldırıldı - sadece video geçişi yapıyor
        }
     
           // İlerleme kaydetme fonksiyonu
      function saveProgress(videoId) {
        const courseId = @Model.Id; // Razor syntax ile course ID'yi al
        
        fetch('/Course/SaveProgress', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: `courseId=${courseId}&videoId=${videoId}`
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            console.log('İlerleme kaydedildi:', data.message);
          } else {
            console.error('İlerleme kaydedilemedi:', data.message);
          }
        })
        .catch(error => {
          console.error('Hata:', error);
        });
      }
      
      // Video tamamlandı işaretleme fonksiyonu
      function markVideoAsCompleted(videoId) {
        const courseId = @Model.Id;
        const button = event.target.closest('button');
        
        // Butonu devre dışı bırak
        button.disabled = true;
        button.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>Kaydediliyor...';
        
        fetch('/Course/SaveProgress', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: `courseId=${courseId}&videoId=${videoId}`
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Başarı mesajı göster
            button.innerHTML = '<i class="bi bi-check-circle-fill me-1"></i>Tamamlandı!';
            button.style.background = 'linear-gradient(135deg, #198754, #146c43)';
            
            // Checkbox'ı işaretle
            const checkbox = document.getElementById(`video_${videoId}`);
            if (checkbox) {
              checkbox.checked = true;
              updateVideoItemStyle(videoId, true);
            }
            
            // completedVideoIds listesine ekle
            const completedVideoIds = window.completedVideoIds || [];
            if (!completedVideoIds.includes(videoId)) {
              completedVideoIds.push(videoId);
            }
            window.completedVideoIds = completedVideoIds;
            
            // 2 saniye sonra bir sonraki videoya geç
            setTimeout(() => {
              navigateVideo('next');
            }, 2000);
          } else {
            // Hata durumunda butonu eski haline getir
            button.disabled = false;
            button.innerHTML = '<i class="bi bi-check-circle me-1"></i>Dersi Tamamla';
            button.style.background = 'linear-gradient(135deg, #28a745, #20c997)';
            alert('Video tamamlandı olarak işaretlenemedi: ' + data.message);
          }
        })
        .catch(error => {
          console.error('Hata:', error);
          // Hata durumunda butonu eski haline getir
          button.disabled = false;
          button.innerHTML = '<i class="bi bi-check-circle me-1"></i>Dersi Tamamla';
          button.style.background = 'linear-gradient(135deg, #28a745, #20c997)';
          alert('Bir hata oluştu. Lütfen tekrar deneyin.');
        });
      }
      
             // Checkbox ile video tamamlanma durumunu değiştirme
       function toggleVideoCompletion(videoId, isCompleted) {
         const courseId = @Model.Id;

        
        if (isCompleted) {
          // Video tamamlandı olarak işaretle
          fetch('/Course/SaveProgress', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `courseId=${courseId}&videoId=${videoId}`
          })
          .then(response => response.json())
                     .then(data => {
             if (data.success) {
               console.log('Video tamamlandı olarak işaretlendi:', videoId);
               updateVideoItemStyle(videoId, true);
               
               // ViewBag.CompletedVideoIds listesine ekle (client-side)
               const completedVideoIds = window.completedVideoIds || [];
               if (!completedVideoIds.includes(videoId)) {
                 completedVideoIds.push(videoId);
               }
               window.completedVideoIds = completedVideoIds;
             } else {
               // Hata durumunda checkbox'ı geri al
               const checkbox = document.getElementById(`video_${videoId}`);
               if (checkbox) {
                 checkbox.checked = false;
               }
               alert('Video tamamlandı olarak işaretlenemedi: ' + data.message);
             }
           })
          .catch(error => {
            console.error('Hata:', error);
            // Hata durumunda checkbox'ı geri al
            const checkbox = document.getElementById(`video_${videoId}`);
            if (checkbox) {
              checkbox.checked = false;
            }
            alert('Bir hata oluştu. Lütfen tekrar deneyin.');
          });
        } else {
          // Video tamamlanma durumunu kaldır
          fetch('/Course/RemoveProgress', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `courseId=${courseId}&videoId=${videoId}`
          })
          .then(response => response.json())
                     .then(data => {
             if (data.success) {
               console.log('Video tamamlanma durumu kaldırıldı:', videoId);
               updateVideoItemStyle(videoId, false);
               
               // ViewBag.CompletedVideoIds listesini güncelle (client-side)
               const completedVideoIds = window.completedVideoIds || [];
               const index = completedVideoIds.indexOf(videoId);
               if (index > -1) {
                 completedVideoIds.splice(index, 1);
               }
               window.completedVideoIds = completedVideoIds;
             } else {
               // Hata durumunda checkbox'ı geri al
               const checkbox = document.getElementById(`video_${videoId}`);
               if (checkbox) {
                 checkbox.checked = true;
               }
               alert('Video tamamlanma durumu kaldırılamadı: ' + data.message);
             }
           })
          .catch(error => {
            console.error('Hata:', error);
            // Hata durumunda checkbox'ı geri al
            const checkbox = document.getElementById(`video_${videoId}`);
            if (checkbox) {
              checkbox.checked = true;
            }
            alert('Bir hata oluştu. Lütfen tekrar deneyin.');
          });
        }
      }
      
      // Video item stilini güncelle
      function updateVideoItemStyle(videoId, isCompleted) {
        const videoItem = document.querySelector(`[data-video-id="${videoId}"]`);
        if (videoItem) {
          const icon = videoItem.querySelector('.bi');
          const title = videoItem.querySelector('.fw-semibold');
          const badge = videoItem.querySelector('.badge');
          
          if (isCompleted) {
            // Tamamlandı stili
            videoItem.style.borderLeft = '4px solid #28a745';
            icon.className = 'bi bi-check-circle-fill text-success';
            icon.style.color = '#28a745';
            title.classList.add('text-success');
            if (badge) {
              badge.className = 'badge bg-success';
              badge.textContent = 'Tamamlandı';
            }
          } else {
            // Tamamlanmamış stili
            videoItem.style.borderLeft = '';
            icon.className = 'bi bi-play-circle-fill';
            icon.style.color = '#6F42C1';
            title.classList.remove('text-success');
            if (badge) {
              badge.className = 'badge bg-secondary';
              badge.textContent = 'Video süresi'; // Bu kısım dinamik olarak güncellenecek
            }
          }
        }
      }
    
         // Video listesi item'larına tıklama olayı ekle
     document.addEventListener('DOMContentLoaded', function() {
       const videoItems = document.querySelectorAll('.video-item');
       videoItems.forEach(function(item, index) {
                   item.addEventListener('click', function(e) {
            // Checkbox'a tıklandıysa video değiştirme
            if (e.target.type === 'checkbox' || e.target.classList.contains('form-check-input') || e.target.classList.contains('form-check-label')) {
              return;
            }
            
            // Aktif video item'ını güncelle
            videoItems.forEach(v => v.style.background = 'rgba(111,66,193,0.05)');
            this.style.background = 'rgba(111,66,193,0.2)';
            
                        // Video bilgilerini data attribute'lardan al
             const videoUrl = this.getAttribute('data-video-url');
             const videoName = this.getAttribute('data-video-name');
             const videoDescription = this.getAttribute('data-video-description');
             const videoId = this.getAttribute('data-video-id');
             
             // Current video index'i güncelle
             currentVideoIndex = index;
             
             changeVideo(videoUrl, videoName, videoDescription, videoId);
            
            // Navigasyon butonlarını güncelle
            updateNavigationButtons();
          });
       });
       
       // Sayfa yüklendiğinde navigasyon butonlarını güncelle
       updateNavigationButtons();
       
       // Sayfa yüklendiğinde API kullanım durumunu güncelle
       updateApiUsage();
     });
     
     // API kullanım durumunu güncelle
     function updateApiUsage() {
       fetch('/Course/GetApiUsage')
         .then(response => response.json())
         .then(data => {
           if (data.success) {
             const usedCount = document.getElementById('usedCount');
             const totalCount = document.getElementById('totalCount');
             const remainingText = document.getElementById('remainingText');
             const progressBar = document.getElementById('usageProgressBar');
             
             usedCount.textContent = data.used;
             totalCount.textContent = data.total;
             
             const remaining = data.remaining;
             const percentage = data.percentage;
             
             // Kalan istek sayısını göster
             if (remaining > 0) {
               remainingText.textContent = `Yapay zekadan yardım almak için ${remaining} istek hakkınız kaldı`;
               remainingText.style.color = '#4caf50';
             } else {
               remainingText.textContent = 'Günlük limit aşıldı';
               remainingText.style.color = '#f44336';
             }
             
             // Progress bar'ı güncelle
             progressBar.style.width = `${percentage}%`;
             
             // Progress bar rengini ayarla
             if (percentage < 50) {
               progressBar.style.background = 'linear-gradient(135deg, #4caf50, #8bc34a)';
             } else if (percentage < 80) {
               progressBar.style.background = 'linear-gradient(135deg, #ff9800, #ffc107)';
             } else {
               progressBar.style.background = 'linear-gradient(135deg, #f44336, #e91e63)';
             }
           }
         })
         .catch(error => {
           console.error('API kullanım durumu hatası:', error);
         });
     }
     

     
     // Video özetleme fonksiyonu
     function summarizeVideo() {
       const summaryArea = document.getElementById('videoSummary');
       const pdfDownloadSection = document.getElementById('pdfDownloadSection');
       
       // Mevcut video ID'sini al
       const currentVideoId = getCurrentVideoId();
       if (!currentVideoId) {
         alert('Ders bilgisi bulunamadı. Lütfen sayfayı yenileyin.');
         return;
       }
       
       // Loading durumu göster
       summaryArea.innerHTML = `
         <div style="color: #6F42C1; text-align: center; padding: 2rem 0;">
           <i class="bi bi-robot" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
           <p style="margin: 0;">Ders özetleniyor...</p>
           <small>Gemini AI çalışıyor</small>
         </div>
       `;
       
       // PDF indirme bölümünü gizle
       pdfDownloadSection.style.display = 'none';
       
       // Gemini API çağrısı
       fetch('/Course/SummarizeVideo', {
         method: 'POST',
         headers: {
           'Content-Type': 'application/json',
         },
         body: JSON.stringify({ videoId: parseInt(currentVideoId) })
       })
       .then(response => response.json())
       .then(data => {
         if (data.success) {
           // Başarılı özet
           summaryArea.style.display = 'block';
           summaryArea.style.alignItems = 'flex-start';
           summaryArea.style.justifyContent = 'flex-start';
           summaryArea.innerHTML = `
             <div style="color: #333; width: 100%;">
               <h6 style="color: #6F42C1; margin-bottom: 1rem;">
                 <i class="bi bi-robot me-2"></i>Ders Özeti
               </h6>
               <div style="background: #f8f9fa; border-radius: 8px; padding: 1rem; white-space: pre-line;">
                 ${data.summary}
               </div>
             </div>
           `;
           
           // PDF indirme bölümünü göster
           pdfDownloadSection.style.display = 'block';
           
           // Özeti global değişkende sakla
           window.currentSummary = data.summary;
           
           // API kullanım durumunu güncelle
           updateApiUsage();
         } else {
           // Hata durumu
           summaryArea.style.display = 'flex';
           summaryArea.style.alignItems = 'center';
           summaryArea.style.justifyContent = 'center';
           summaryArea.innerHTML = `
             <div style="color: #dc3545; text-align: center;">
               <i class="bi bi-exclamation-triangle" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
               <p style="margin: 0;">Ders özetlenirken hata oluştu</p>
               <small>${data.message}</small>
             </div>
           `;
         }
       })
       .catch(error => {
         console.error('Hata:', error);
         summaryArea.style.display = 'flex';
         summaryArea.style.alignItems = 'center';
         summaryArea.style.justifyContent = 'center';
         summaryArea.innerHTML = `
           <div style="color: #dc3545; text-align: center;">
             <i class="bi bi-exclamation-triangle" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
             <p style="margin: 0;">Bağlantı hatası</p>
             <small>Lütfen internet bağlantınızı kontrol edin</small>
           </div>
         `;
       });
     }
     
     // Mevcut video ID'sini al
     function getCurrentVideoId() {
       // Önce aktif video item'ını bul
       const activeVideoItem = document.querySelector('.video-item[style*="background: rgba(111,66,193,0.2)"]');
       if (activeVideoItem) {
         return activeVideoItem.getAttribute('data-video-id');
       }
       
       // Eğer aktif video bulunamazsa, currentVideoIndex'e göre al
       const videoItems = document.querySelectorAll('.video-item');
       if (videoItems.length > 0 && typeof currentVideoIndex !== 'undefined') {
         if (currentVideoIndex >= 0 && currentVideoIndex < videoItems.length) {
           return videoItems[currentVideoIndex].getAttribute('data-video-id');
         }
       }
       
       // Son çare olarak ilk videoyu al
       const firstVideoItem = document.querySelector('.video-item');
       if (firstVideoItem) {
         return firstVideoItem.getAttribute('data-video-id');
       }
       
       return null;
     }
     
           // Video navigasyon fonksiyonu
      let currentVideoIndex = 0;
      let videoList = [];
      
             // Tamamlanan video ID'lerini client-side'da tut
       window.completedVideoIds = @Html.Raw(Json.Serialize(ViewBag.CompletedVideoIds ?? new List<int>()));

     
     function navigateVideo(direction) {
       const videoItems = document.querySelectorAll('.video-item');
       
       if (videoItems.length === 0) return;
       
       if (direction === 'next' && currentVideoIndex < videoItems.length - 1) {
         currentVideoIndex++;
       } else if (direction === 'prev' && currentVideoIndex > 0) {
         currentVideoIndex--;
       }
       
       // Video listesindeki ilgili item'ı tıkla
       if (videoItems[currentVideoIndex]) {
         // Aktif video item'ını güncelle
         videoItems.forEach(v => v.style.background = 'rgba(111,66,193,0.05)');
         videoItems[currentVideoIndex].style.background = 'rgba(111,66,193,0.2)';
         
         // Video bilgilerini al ve değiştir
         const videoUrl = videoItems[currentVideoIndex].getAttribute('data-video-url');
         const videoName = videoItems[currentVideoIndex].getAttribute('data-video-name');
         const videoDescription = videoItems[currentVideoIndex].getAttribute('data-video-description');
         const videoId = videoItems[currentVideoIndex].getAttribute('data-video-id');
         
         changeVideo(videoUrl, videoName, videoDescription, videoId);
       }
       
       // Buton durumlarını güncelle
       updateNavigationButtons();
     }
     
     function updateNavigationButtons() {
       const videoItems = document.querySelectorAll('.video-item');
       const prevBtn = document.getElementById('prevVideoBtn');
       const nextBtn = document.getElementById('nextVideoBtn');
       
       if (videoItems.length === 0) {
         prevBtn.disabled = true;
         nextBtn.disabled = true;
         return;
       }
       
       // Önceki buton durumu
       prevBtn.disabled = currentVideoIndex === 0;
       
       // Sonraki buton durumu
       nextBtn.disabled = currentVideoIndex === videoItems.length - 1;
     }
     
     // AI Asistan Fonksiyonları
     document.addEventListener('DOMContentLoaded', function() {
       const questionForm = document.getElementById('questionForm');
       const questionInput = document.getElementById('questionInput');
       const sendQuestionBtn = document.getElementById('sendQuestionBtn');
       const chatMessages = document.getElementById('chatMessages');
       
       // Form submit olayını dinle
       questionForm.addEventListener('submit', function(e) {
         e.preventDefault();
         askQuestion();
       });
       
       // Enter tuşu ile gönderme
       questionInput.addEventListener('keypress', function(e) {
         if (e.key === 'Enter') {
           e.preventDefault();
           askQuestion();
         }
       });
     });
     
     function askQuestion() {
       const questionInput = document.getElementById('questionInput');
       const sendQuestionBtn = document.getElementById('sendQuestionBtn');
       const chatMessages = document.getElementById('chatMessages');
       const question = questionInput.value.trim();
       
       if (!question) {
         return;
       }
       
       // Kullanıcı mesajını ekle
       addMessage('user', question);
       
       // Input'u temizle ve butonu devre dışı bırak
       questionInput.value = '';
       sendQuestionBtn.disabled = true;
       sendQuestionBtn.innerHTML = '<i class="bi bi-hourglass-split"></i>';
       
       // Loading mesajı ekle
       const loadingMessageId = addMessage('ai', 'Düşünüyorum... 🤔', true);
       
       // Mevcut video ID'sini al
       const videoId = getCurrentVideoId();
       
       if (!videoId) {
         // Loading mesajını kaldır - sadece loading mesajını kaldır
         if (loadingMessageId) {
           const loadingMessage = document.getElementById(loadingMessageId);
           if (loadingMessage && loadingMessage.textContent.includes('Düşünüyorum')) {
             loadingMessage.remove();
           }
         }
         addMessage('ai', 'Video bilgisi bulunamadı. Lütfen sayfayı yenileyin.');
         sendQuestionBtn.disabled = false;
         sendQuestionBtn.innerHTML = '<i class="bi bi-send"></i>';
         return;
       }
       
       // API'ye soru gönder
       fetch('/Course/AskQuestion', {
         method: 'POST',
         headers: {
           'Content-Type': 'application/json',
         },
         body: JSON.stringify({
           videoId: parseInt(videoId),
           question: question
         })
       })
       .then(response => {
         console.log('Response status:', response.status);
         return response.json();
       })
       .then(data => {
         console.log('Response data:', data);
         // Loading mesajını kaldır - sadece loading mesajını kaldır
         if (loadingMessageId) {
           const loadingMessage = document.getElementById(loadingMessageId);
           if (loadingMessage && loadingMessage.textContent.includes('Düşünüyorum')) {
             loadingMessage.remove();
           }
         }
         
         if (data.success) {
           addMessage('ai', data.answer);
           
           // API kullanım durumunu güncelle
           updateApiUsage();
         } else {
           addMessage('ai', data.message || 'Üzgünüm, sorunuzu cevaplayamadım. Lütfen daha sonra tekrar deneyin.');
         }
       })
       .catch(error => {
         console.error('Hata:', error);
         // Loading mesajını kaldır - sadece loading mesajını kaldır
         if (loadingMessageId) {
           const loadingMessage = document.getElementById(loadingMessageId);
           if (loadingMessage && loadingMessage.textContent.includes('Düşünüyorum')) {
             loadingMessage.remove();
           }
         }
         addMessage('ai', 'Bağlantı hatası oluştu. Lütfen internet bağlantınızı kontrol edin.');
       })
       .finally(() => {
         sendQuestionBtn.disabled = false;
         sendQuestionBtn.innerHTML = '<i class="bi bi-send"></i>';
       });
     }
     
     function addMessage(sender, message, isTemporary = false) {
       const chatMessages = document.getElementById('chatMessages');
       const messageDiv = document.createElement('div');
       const messageId = 'msg_' + Date.now();
       
       messageDiv.id = messageId;
       messageDiv.className = `message ${sender}`;
       
       if (sender === 'user') {
         messageDiv.innerHTML = `<strong>Sen:</strong> ${message}`;
         messageDiv.style.textAlign = 'right';
         messageDiv.style.marginLeft = 'auto';
         messageDiv.style.maxWidth = '80%';
         messageDiv.style.background = 'linear-gradient(135deg, #FFD700, #FFA500)';
         messageDiv.style.color = '#333';
         messageDiv.style.padding = '10px';
         messageDiv.style.borderRadius = '15px';
         messageDiv.style.marginBottom = '10px';
         messageDiv.style.boxShadow = '0 2px 8px rgba(255, 215, 0, 0.3)';
       } else {
         messageDiv.innerHTML = `<strong>AI:</strong> ${message}`;
         messageDiv.style.background = 'linear-gradient(135deg, #667eea, #764ba2)';
         messageDiv.style.color = 'white';
         messageDiv.style.padding = '10px';
         messageDiv.style.borderRadius = '15px';
         messageDiv.style.marginBottom = '10px';
         messageDiv.style.maxWidth = '80%';
       }
       
       chatMessages.appendChild(messageDiv);
       
       // Scroll'u en alta kaydır
       chatMessages.scrollTop = chatMessages.scrollHeight;
       
       return messageId;
     }
     
     function removeMessage(messageId) {
       const message = document.getElementById(messageId);
       if (message) {
         message.remove();
       }
     }
     
     // PDF indirme fonksiyonu
     function downloadPdf() {
       const currentVideoId = getCurrentVideoId();
       const courseId = @Model.Id;
       
       if (!currentVideoId) {
         alert('Video bilgisi bulunamadı. Lütfen sayfayı yenileyin.');
         return;
       }
       
       if (!window.currentSummary) {
         alert('Önce ders özetini oluşturun.');
         return;
       }
       
       // Butonu devre dışı bırak
       const downloadBtn = document.getElementById('downloadPdfBtn');
       const originalText = downloadBtn.innerHTML;
       downloadBtn.disabled = true;
       downloadBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>PDF Oluşturuluyor...';
       
       // PDF indirme isteği
       fetch('/Course/DownloadPdf', {
         method: 'POST',
         headers: {
           'Content-Type': 'application/json',
         },
         body: JSON.stringify({
           videoId: parseInt(currentVideoId),
           courseId: courseId,
           summary: window.currentSummary
         })
       })
       .then(response => {
         if (response.ok) {
           // PDF dosyasını indir
           return response.blob();
         } else {
           return response.json().then(data => {
             throw new Error(data.message || 'PDF oluşturulamadı');
           });
         }
       })
       .then(blob => {
         // Dosya adını oluştur
         const videoName = document.querySelector('h5').textContent;
         const courseName = '@Model.Name';
         const fileName = `${courseName}_${videoName}_${new Date().toISOString().slice(0, 10)}.pdf`;
         
         // Dosyayı indir
         const url = window.URL.createObjectURL(blob);
         const a = document.createElement('a');
         a.href = url;
         a.download = fileName.replace(/[^a-zA-Z0-9._-]/g, '_');
         document.body.appendChild(a);
         a.click();
         window.URL.revokeObjectURL(url);
         document.body.removeChild(a);
         
         // Başarı mesajı
         alert('PDF başarıyla indirildi!');
       })
       .catch(error => {
         console.error('PDF indirme hatası:', error);
         alert('PDF indirilemedi: ' + error.message);
       })
       .finally(() => {
         // Butonu eski haline getir
         downloadBtn.disabled = false;
         downloadBtn.innerHTML = originalText;
       });
     }
     

   </script>
</body>
</html> 